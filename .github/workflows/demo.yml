name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies #la acción de cacheo se pone antes que se cachee, en este caso la instalación de dependencias.
        uses: actions/cache@v3
        with:
          path: ~/.npm #este es el path donde npm cachea las dependencias
          key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
          #creamos una clave que contiene un hash de package-lock.json, si este cambia su contenido, cambia el hash y por tanto la key, y eso indica que obviamente el caché almacenado ya no vale (porque packages-lock ha cambiado y por tanto hay que volver a reinstalar las dependencias)
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{steps.publish.outputs.script-file}} #este nombre lo elejimos nosotros.
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies #la acción de cacheo se pone antes que se cachee, en este caso la instalación de dependencias.
        uses: actions/cache@v3
        with:
          path: ~/.npm #aunque tengamos que repetir el comando, se usa la misma caché de antes
          key: deps-node-modules-${{ hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        id: publish
        run: find dist/assets/*js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get builds artifacts
        uses: actions/download-artifact@v4
        with: 
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file}}" #needs apunta a build, como hemos puesto más arriba
      - name: Deploy
        run: echo "Deploying..."
